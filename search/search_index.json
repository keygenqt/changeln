{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Changeln","text":""},{"location":"#license","title":"License","text":"<pre><code>Copyright 2021-2024 Vitaliy Zarubin\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"install/","title":"Install Changeln","text":""},{"location":"install/#install-dependencies","title":"Install dependencies","text":"<pre><code>sudo apt update &amp;&amp; sudo apt install git\n</code></pre>"},{"location":"install/#install-application","title":"Install application","text":"<ul> <li>Method 1 - pip</li> <li>Method 2 - pyz</li> <li>Method 3 - source</li> </ul>"},{"location":"install/pip/","title":"Install Changeln from PyPi","text":"<p>The standard way to distribute python packages.</p> <pre><code>python3 -m pip install changeln\n</code></pre>"},{"location":"install/pyz/","title":"Install Changeln *.pyz","text":"<p>This method is as simple as possible - the entire application is in a pyz file.</p>"},{"location":"install/pyz/#create-folder","title":"Create folder","text":"<pre><code>mkdir ~/.local/opt\n</code></pre>"},{"location":"install/pyz/#download","title":"Download","text":"<pre><code>wget -x https://github.com/keygenqt/changeln/raw/main/builds/changeln-2.0.1.pyz \\\n  -O ~/.local/opt/changeln.pyz\n</code></pre>"},{"location":"install/pyz/#add-alias-to-bashrc","title":"Add alias to <code>~/.bashrc</code>","text":"<pre><code>alias changeln='python3 ~/.local/opt/changeln.pyz'\n</code></pre>"},{"location":"install/pyz/#update-environment","title":"Update environment","text":"<pre><code>source ~/.bashrc\n</code></pre>"},{"location":"install/source/","title":"Install Changeln from GitHub","text":"<p>This method is suitable for development.</p>"},{"location":"install/source/#create-folder","title":"Create folder","text":"<pre><code>mkdir -p ~/.local/opt/changeln\n</code></pre>"},{"location":"install/source/#clone-project","title":"Clone project","text":"<pre><code>git clone https://github.com/keygenqt/changeln.git ~/.local/opt/changeln\n</code></pre>"},{"location":"install/source/#open-folder-project","title":"Open folder project","text":"<pre><code>cd ~/.local/opt/changeln\n</code></pre>"},{"location":"install/source/#init-environment","title":"Init environment","text":"<pre><code>virtualenv .venv\n</code></pre>"},{"location":"install/source/#open-environment","title":"Open environment","text":"<pre><code>source .venv/bin/activate\n</code></pre>"},{"location":"install/source/#install-requirements","title":"Install requirements","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"install/source/#run-app","title":"Run app","text":"<pre><code>python -m changeln\n</code></pre>"},{"location":"using/","title":"Changeln","text":"<p>The application is designed to automate the generation of reports based on git history in the following formats:</p> <ul> <li>markdown</li> <li>html</li> <li>pdf</li> </ul> <p>Comments with a specific format are used for generation, Simply put, a comment that should be included in the report must have a tag. For example:</p> <pre><code>[feature] My best commit.\n</code></pre> <p>Tags and groups can be defined in the configuration file. By default, there are 3 tags:</p> <ul> <li><code>[bug]</code> - bug fix</li> <li><code>[change]</code> - change of current feature</li> <li><code>[feature]</code> - new feature</li> </ul> <p>It is possible to customize the changelog file generation format using the Mako template engine.</p> <p>To start using the application, simply call it in the directory with your project, the application will add the necessary configuration files and create changelog.md for you:</p> <pre><code>changeln\n</code></pre> <p>It is possible to specify the path to the configuration file, This is convenient when one project requires several different readings.</p> <p>By default, a file is generated in <code>markdown</code> format. To generate <code>pdf</code> you can call:</p> <pre><code>changeln --out pdf\n</code></pre> <p>And for the countdown in <code>html</code>:</p> <pre><code>changeln --out html\n</code></pre> <p>If you have an idea on how to improve applications or you encounter an error, welcome to GitHub.</p> <p>And don't forget to put stars =)</p>"},{"location":"using/config/","title":"Config Changeln","text":"<p>This is the default configuration file. Using this you can define tags, groups, and specify the path to the template. Parse your comments using the regular expression for comments format output. And filter out tags that should be skipped when generating a reference.</p> <pre><code>## Application configuration file Changeln\n## Version config: 0.0.2\n\n## Comment tags by which they will be searched\n## and groups by which they will be analyzed.\ncommits:\n  Bug: '[bug]'\n  Change: '[change]'\n  Feature: '[feature]'\n\n## Path to mako template\ntemplate: ./changeln.mako\n\n## Regular expression to break the comment into groups\n## to format the comment output in the changelog in the \n## \"regex\" variable.\n##\n## The empty value is not used.\nparse: ''\n\n## Filter tags using regular expressions\n##\n## The empty value is not used.\nfilter: ''\n</code></pre>"},{"location":"using/template/","title":"Template Changeln","text":"<p>This is the default template based on which the changelog will be generated. Templates engine - Mako.</p> <pre><code>&lt;%! from datetime import datetime %&gt;\n\n${\"##\"} Updated: ${ln_date.strftime('%m/%d/%Y %H:%M:%S %p')}\n\n${\"##\"} Info\n\n- Last tag: ${ln_last}\n- Released: ${ln_count_tags}\n\n${\"##\"} Versions\n\n% for item in ln_list_tags:\n- Version: ${item.name} (${datetime.fromtimestamp(item.commit.committed_date).strftime('%d/%m/%Y')})\n% endfor\n\n% for tag in ln_group_commits:\n\n    % if tag['commits']:\n        % if tag['name'] == 'HEAD':\n            ${\"###\"} HEAD (${ln_date.strftime('%d/%m/%Y')})\n        % else:\n            ${\"###\"} Version: ${tag['name']} (${datetime.fromtimestamp(tag['date']).strftime('%d/%m/%Y')})\n        % endif\n    % endif\n\n    % for group in tag['group']:\n\n        % if group['commits']:\n            ${\"####\"} ${group['name']}\n\n            % for commit in group['commits']:\n                - ${commit['clean']} (${commit['commit'].author})\n            % endfor\n        % endif\n\n    % endfor\n% endfor\n</code></pre> <p>You can add all the data to the template:</p> <pre><code>${context.keys()}\n${context.__dict__}\n</code></pre> <p>The application outputs data to a template, its structure is as follows:</p> <pre><code>// Date now\nln_date: datetime\n\n// Last tag\nln_last: str\n\n// All find tags\nln_list_tags: [TagReference]\n\n// Count tags\nln_count_tags: int\n\n// Goups commits by tags\nln_group_commits: [\n    // Name TAG/HEAD\n    name: str, \n    // Date create tag\n    date: datetime,\n    // All commits\n    commits: [Commit],\n    // Commits by group\n    group: [\n            {\n                // Name group from config\n                name: str, \n                // Commits group\n                commits: [\n                    {\n                        // Commit\n                        commit: Commit,\n                        // Groups regex from config if not empty value\n                        regex: [],\n                        // Message commit without [tag]\n                        clean: str\n                    }\n                ]\n            }\n         ]\n    ]\n</code></pre>"}]}